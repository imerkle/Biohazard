apiVersion: "vault.banzaicloud.com/v1alpha1"
kind: "Vault"
metadata:
  name: vault
  namespace: vault
spec:
  size: 1
  image: "vault:1.11.6"


  # Specify the ServiceAccount where the Vault Pod and the Bank-Vaults configurer/unsealer is running
  serviceAccount: vault
  serviceType: ClusterIP


  ingress:
    annotations:
      # cert-manager.io/cluster-issuer: "${CLUSTER_CERT}"
      #kubernetes.io/ingress.class: haproxy
      #   cert-manager.io/cluster-issuer: letsencrypt-prod
      #   hajimari.io/appName: Vault
      #   hajimari.io/icon: database-lock
      external-dns.alpha.kubernetes.io/target: "${DNS_MAIN}"
      external-dns/is-public: "true"
    spec:
      ingressClassName: nginx
      rules:
        - host: &host "vault.${DNS_MAIN}"
          http:
            paths:
              - backend:
                  service:
                    name: vault
                    port:
                      number: 8200
                path: /
                pathType: Prefix
      tls:
        - hosts:
            - *host
          secretName: vault-tls

  # Use local disk to store Vault file data, see config section.
  volumes:
    - name: vault-file
      persistentVolumeClaim:
        claimName: vault-file

  volumeMounts:
    - name: vault-file
      mountPath: /vault/file

  # a subpath called credentials, in order for it to be mounted correctly.
  # credentialsConfig:
  #   env: GOOGLE_APPLICATION_CREDENTIALS
  #   path: "/etc/gcp/service-account.json"
  #   secretName: "kms-vault-unseal"

  # Describe where you would like to store the Vault unseal keys and root token.
  unsealConfig:
    # google:
    #   kmsKeyRing: "vault"
    #   kmsCryptoKey: "vault-unsealer"
    #   kmsLocation: "global"
    #   kmsProject: "continual-air-196513"
    #   storageBucket: "vault-ha"

    options:
      # The preFlightChecks flag enables unseal and root token storage tests
      # This is true by default
      preFlightChecks: true
      # The storeRootToken flag enables storing of root token in chosen storage
      # This is true by default
      storeRootToken: true
    kubernetes:
      secretNamespace: vault

  # A YAML representation of a final vault config file.
  # See https://www.vaultproject.io/docs/configuration/ for more information.
  config:
    storage:
      file:
        path: "/vault/file"
        #"${ .Env.VAULT_STORAGE_FILE }" # An example how Vault config environment interpolation can be used
    listener:
      tcp:
        address: "[::]:8200"
        cluster_address: "[::]:8201"
        # TODO enable TLS?
        tls_disable: true
        # tls_cert_file: /vault/tls/server.crt
        # tls_key_file: /vault/tls/server.key
    # telemetry:
    #   statsd_address: localhost:9125
    # seal:
    #   gcpckms:
    #     project: "future-mystery-383416"
    #     region: "global"
    #     key_ring: "sops"
    #     crypto_key: "sops-key"
    ui: true

  # See: https://banzaicloud.com/docs/bank-vaults/cli-tool/#example-external-vault-configuration
  # The repository also contains a lot examples in the deploy/ and operator/deploy directories.
  externalConfig:
    policies:
      - name: allow_secrets
        rules: path "secret/*" {
          capabilities = ["create", "read", "update", "delete", "list"]
          }
      - name: allow_pki
        rules: path "pki/*" {
          capabilities = ["create", "read", "update", "delete", "list"]
          }

    groups:
      - name: admin1
        policies:
          - allow_secrets
        metadata:
          privileged: true
        type: external
      - name: admin2
        policies:
          - allow_secrets
        metadata:
          privileged: true
        type: external

    group-aliases:
      - name: admin1
        mountpath: token
        group: admin1

    auth:
      - type: kubernetes
        roles:
          # Allow every pod in the default namespace to use the secret kv store
          - name: default
            bound_service_account_names:
              [
                "*"
              ]
            bound_service_account_namespaces: ["*"]
            policies: ["allow_secrets", "allow_pki"]
            ttl: 1h
          - name: grafana
            bound_service_account_names:
              [
                "*"
              ]
            bound_service_account_namespaces: ["*"]
            policies: ["allow_secrets", "allow_pki"]
            ttl: 1h            

    secrets:
      - path: secret
        type: kv
        description: General secrets.
        options:
          version: 2

      - type: pki
        description: Vault PKI Backend
        config:
          default_lease_ttl: 168h
          max_lease_ttl: 720h
        configuration:
          config:
            - name: urls
              issuing_certificates: https://vault.vault:8200/v1/pki/ca
              crl_distribution_points: https://vault.vault:8200/v1/pki/crl
          root/generate:
            - name: internal
              common_name: vault.default
          roles:
            - name: default
              allowed_domains: localhost,pod,svc,default,grafana,vault
              allow_subdomains: true
              generate_lease: true
              ttl: 1m

    # Allows writing some secrets to Vault (useful for development purposes).
    # See https://www.vaultproject.io/docs/secrets/kv/index.html for more information.
    startupSecrets:
      - type: kv
        path: secret/data/accounts/aws
        data:
          data:
            AWS_ACCESS_KEY_ID: secretId
            AWS_SECRET_ACCESS_KEY: s3cr3t
      - type: kv
        path: secret/data/dockerrepo
        data:
          data:
            DOCKER_REPO_USER: dockerrepouser
            DOCKER_REPO_PASSWORD: dockerrepopassword
      - type: kv
        path: secret/data/mysql
        data:
          data:
            MYSQL_ROOT_PASSWORD: s3cr3t
            MYSQL_PASSWORD: 3xtr3ms3cr3t
      - type: kv
        path: secret/data/radarr
        data:
          data:
            API_KEY: randomradarrapikey
      - type: kv
        path: secret/data/sonarr
        data:
          data:
            API_KEY: randomsonarrapikey        
      - type: kv
        path: secret/data/bazarr
        data:
          data:
            API_KEY: randomsonarrapikey
      - type: kv
        path: secret/data/prowlarr
        data:
          data:
            API_KEY: randomsonarrapikey            
      - type: kv
        path: secret/data/lldap
        data:
          data:
            JWT_SECRET: randomsonarrapikey
            LDAP_USER_PASS: randomsonarrapikey
            USER_DN: randomsonarrapikey
            SERVER_KEY_SEED: randomsonarrapikey
      - type: kv
        path: secret/data/authelia
        data:
          data:
            OIDC_ISSUER_PRIVATE_KEY: "-----BEGIN RSA PRIVATE KEY-----
              MIICXAIBAAKBgGDXHKJGwdSaOCaMm6Y3+xUYD8udDmrdcjOhjObkuGRbEI2w5Lrz
              +lTZm0Krc3Gnb5qfVDVqPdAeEdG83iCjnD6DJKXySAm94QPnCxfO8wMAn0GqQqnA
              jDuOAtIw1dXEyiM7tWZVVrXJjKL6joG6BSisSGplMX2Fj4QoVVjE5PMFAgMBAAEC
              gYBIdw+9Ovd2cQTNi/A5PLDNQxkmw1rziswXaK84ZDS7HA3SCWnPoBxV/BQbmpKj
              nKh96vYnll2065tn+E273NJgZTkSkmBDqIS9Hh7eKjh5rH9591hPC7ZdTH6jDuBw
              wOYP678jmV4JphVCGHp7KUsjo2RQpUsx0mfVtXtg8vLhjQJBAJ7JqAOOHwkl2MBj
              Cekfzu+h9frUgAMQ/Vj5wfbVKn9Xu845xBXXTiQJgTgDUM6IALfqp6OLE6HZh1FP
              Gad5bEsCQQCcIJx0cMW09sYYa9gKkkKpdpPZY2L9N4sNpmEave6D3rz3MH+u1uzj
              tzeiNQ+bMlYfrt2YWsCpEzaVUXoIYOvvAkEAg3+5NoiCR08ie+EJGhkPhQB59yn4
              gZGWXhMogMP0F9WOYLESJIxT2CBO9RY523BiN+2KuzO4JHdDSyDYvAsglQJAcKOO
              fOuHmAGZ9bCIk0fmVEC6dlIf7rQN3HE3CYYR+I3QIz6YP9nL2pYqyxohAkUUoZMV
              SH/hE5pK/PtlYXobfQJBAIg930x2LFxxL8ujECOO4Dn61+2BGlI+WynY6jUZjhJr
              rFTB8p8P1btrlOVx5cqYOMStQQgDZG7sq5hxdQkoyUQ=
              -----END RSA PRIVATE KEY-----"
      - type: kv
        path: secret/data/maddy
        data:
          data:
            SMTP_USERNAME: resend
            SMTP_PASSWORD: re_Ajv54BE7_9AAS6T9VJtjk1LjdCNua3iZD
            SMTP_SERVER: smtp.resend.com
            SMTP_DOMAIN: 0xcyb.org
      - type: kv
        path: secret/data/minio
        data:
          data:
            MINIO_ROOT_USER: minioadmin
            MINIO_ROOT_PASSWORD: minioadmin
            MINIO_PROMETHEUS_TOKEN: 
      - type: kv
        path: secret/data/openid
        data:
          data:
            CLIENT_ID: 158145218919-jhrhormtqgo6rc311eqaaill9mnutp5v.apps.googleusercontent.com
            CLIENT_SECRET: v9Tb1cVEfjEXe6ReHjK_my_N
            SCOPES: "openid,profile,email"
      - type: kv
        path: secret/data/redis
        data:
          data:
            PASSWORD: redispass
  vaultEnvsConfig:
    - name: VAULT_LOG_LEVEL
      value: debug
    - name: VAULT_STORAGE_FILE
      value: "/vault/file"

  # If you are using a custom certificate and are setting the hostname in a custom way
  # sidecarEnvsConfig:
  #   - name: VAULT_ADDR
  #     value: https://vault.vault.svc.cluster.local:8200

  # # https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
  # vaultPodSpec:
  #   hostAliases:
  #   - ip: "127.0.0.1"
  #     hostnames:
  #     - "vault.local"

  # It is possible to override the Vault container directly:
  # vaultContainerSpec:
  #   lifecycle:
  #     postStart:
  #       exec:
  #         command:
  #              - setcap cap_ipc_lock=+ep /vault/plugins/orchestrate

  # Marks presence of Istio, which influences things like port namings
  istioEnabled: false

